#!/usr/bin/env nodejs

// Read the exported zip files from https://icomoon.io/app/
// extract the font files and create a SASS file that you can
// integrate in your workflow.
//
// falko@webpgr.com
// License: MIT

const zipFile = process.argv[2] || '../resources/simplyorder.zip';
const sassMapFile = process.argv[3] || './sass/_pos.icons.map.sass';
const fontsPath = process.argv[4] || '../../public/fonts/';
// print process.argv
process.argv.forEach(function (val, index, array) {
	console.log(index + ': ' + val);
});

const AdmZip = require('adm-zip');
const fs = require('fs');

function uid() {
	const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	return s4() + s4();
}

// reading archives
console.log(`reading icomoon zip: ${zipFile}`);
const zip = new AdmZip(zipFile);
const zipEntries = zip.getEntries(); // an array of ZipEntry records


zipEntries.forEach((zipEntry) => {
	// The `selection.json` file contains the mapping of the
	// icon name to the character position in the alphabet.
	if (zipEntry.entryName === 'selection.json') {
		const json = JSON.parse(zipEntry.getData().toString('utf8'));
		const itemString = json.icons
			.map((icon) => {
				const name = icon.properties.name.split(', ')[0];
				// convert decimal code to hex number
				const code = parseInt(icon.properties.code, 10).toString(16);
				return `${name}: '\\${code}'`;
			})
			.join(', ');

		const uuid = uid();
		fs.writeFile(sassMapFile, `$icon-uuid: '${uuid}'\n$icon-map: (${itemString})`, (err) => {
			if (err) {
				return console.warn(err);
			}
			console.log(`overwritten: ${sassMapFile}`);
		});
	// Extract all fonts from the font directory.
	} else if (/fonts\//.test(zipEntry.entryName) && zipEntry.name) {
		zip.extractEntryTo(zipEntry.entryName, fontsPath, false, /*overwrite*/ true);
		console.log(`overwritten: ${fontsPath}${zipEntry.name}`);
	}
});

// Create a SASS file with a content similar to this to use the exported data.
// You can set the name of your font in the icomoon app under Generate Font > âš™ Preferences.
const SASSfile = `
// This SASS file uses the icon map that is generated by the code above.
@import icons.map

@font-face
	font-family: 'myIconFont'
	src: url('/fonts/myIconFont.ttf?#{$icon-uuid}')
	src: url('/fonts/myIconFont.ttf?#{$icon-uuid}') format('truetype')
	src: url('/fonts/myIconFont.woff?#{$icon-uuid}') format('woff')
	src: url('/fonts/myIconFont.svg?#{$icon-uuid}#myIconFont') format('svg')
	font-weight: normal
	font-style: normal

$size-small: 20px
[class^="icon-"], [class*=" icon-"]
	&:before
		/* use !important to prevent issues with browser extensions that change fonts */
		speak: none
		font-style: normal
		font-weight: normal
		font-variant: normal
		text-transform: none
		line-height: 1
		// Better Font Rendering
		-webkit-font-smoothing: antialiased
		-moz-osx-font-smoothing: grayscale
		font-family: 'myIconFont' !important
		font-size: $size-small
		width: $size-small
		height: $size-small

@each $name, $code in $icon-map
	.icon-#{$name}:before
		content: $code
`;
